{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Kunal Verma\n",
    "# Data Science and Business Analytics Intern\n",
    "# The Sparks Foundation(Feb2021)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task-1: Predicting the percentage of a student using Supervised ML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings \n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Obtain the data\n",
    "data=pd.DataFrame()\n",
    "\n",
    "data['study_hrs']=[2.5,5.1,3.2,8.5,3.5,1.5,9.2,5.5,8.3,2.7,7.7,5.9,4.5,3.3,1.1,8.9,\n",
    "                             2.5,1.9,6.1,7.4,2.7,4.8,3.8,6.9,7.8]\n",
    "data['score']=[21,47,27,75,30,20,88,60,81,25,85,62,41,42,17,95,30,24,67,69,30,54,35,76,86]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>study_hrs</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.5</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.1</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.2</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.5</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.5</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   study_hrs  score\n",
       "0        2.5     21\n",
       "1        5.1     47\n",
       "2        3.2     27\n",
       "3        8.5     75\n",
       "4        3.5     30"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 25 entries, 0 to 24\n",
      "Data columns (total 2 columns):\n",
      " #   Column     Non-Null Count  Dtype  \n",
      "---  ------     --------------  -----  \n",
      " 0   study_hrs  25 non-null     float64\n",
      " 1   score      25 non-null     int64  \n",
      "dtypes: float64(1), int64(1)\n",
      "memory usage: 528.0 bytes\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>study_hrs</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>study_hrs</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.976191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>score</th>\n",
       "      <td>0.976191</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           study_hrs     score\n",
       "study_hrs   1.000000  0.976191\n",
       "score       0.976191  1.000000"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Find the correlation coefficient\n",
    "data.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the graph for overview\n",
    "plt.figure(figsize=(5,4))\n",
    "sns.scatterplot(x=data.study_hrs,y=data.score)\n",
    "plt.xlabel('study_hrs',fontdict={'fontsize':15})\n",
    "plt.ylabel('score',fontdict={'fontsize':15})\n",
    "plt.title('Scatter Plot btw study_hrs and score',fontdict={'fontsize':18})\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data['study_hrs'].values.reshape(-1,1)\n",
    "y=data['score'].values.reshape(-1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Build the model\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "reg=LinearRegression()\n",
    "\n",
    "lm=reg.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[9.77580339]]\n",
      "[2.48367341]\n"
     ]
    }
   ],
   "source": [
    "# Get the parameters\n",
    "print(lm.coef_)\n",
    "print(lm.intercept_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[26.93 ],\n",
       "       [52.358],\n",
       "       [33.776],\n",
       "       [85.61 ],\n",
       "       [36.71 ],\n",
       "       [17.15 ],\n",
       "       [92.456],\n",
       "       [56.27 ],\n",
       "       [83.654],\n",
       "       [28.886],\n",
       "       [77.786],\n",
       "       [60.182],\n",
       "       [46.49 ],\n",
       "       [34.754],\n",
       "       [13.238],\n",
       "       [89.522],\n",
       "       [26.93 ],\n",
       "       [21.062],\n",
       "       [62.138],\n",
       "       [74.852],\n",
       "       [28.886],\n",
       "       [49.424],\n",
       "       [39.644],\n",
       "       [69.962],\n",
       "       [78.764]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_predicted=2.48+9.78*X\n",
    "y_predicted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6,4))\n",
    "plt.scatter(X,y)\n",
    "plt.xlabel('study_hrs',fontdict={'fontsize':15})\n",
    "plt.ylabel('score',fontdict={'fontsize':15})\n",
    "plt.plot(X,y_predicted,'r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9529475303396793\n",
      "5.374303646054994\n"
     ]
    }
   ],
   "source": [
    "print(r2_score(y,y_predicted))\n",
    "print(mean_squared_error(y,y_predicted,squared=False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The score when the student studies for 9.25 hrs is:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "92.945"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Result=2.48+9.78*9.25\n",
    "print('The score when the student studies for 9.25 hrs is:')\n",
    "Result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion:\n",
    "- Overall the model has fitted quite well to the data with an R-squared value of 0.95 and the two variables,viz the study hours and the score of the student are highly positively correlated (as expected) with a value of 0.97. The high mean square error value is mainly due to the fact that the dataset so used is quite small and hence some improvements can be made further."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
